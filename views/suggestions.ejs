<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Suggestions - Gamer Community</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <header>
        <%- include('partials/nav') %>
    </header>

    <main class="suggestions-container">
        <h1><i class="fas fa-lightbulb"></i> Game Suggestions</h1>
        
        <% if (suggestions && suggestions.length > 0) { %>
            <div class="suggestions-grid">
                <% suggestions.forEach(suggestion => { %>
                    <div class="suggestion-card" data-id="<%= suggestion._id %>">
                        <img src="<%= suggestion.background_image %>" alt="<%= suggestion.title %>">
                        <h3><%= suggestion.title %></h3>
                        <p><i class="fas fa-gamepad"></i> Genre: <%= suggestion.genre %></p>
                        <p><i class="fas fa-calendar-alt"></i> Release Date: <%= suggestion.releaseDate ? new Date(suggestion.releaseDate).toLocaleDateString() : 'N/A' %></p>
                        <p><i class="fas fa-star"></i> Rating: <%= suggestion.rating ? suggestion.rating.toFixed(1) : 'N/A' %></p>
                        <% if (suggestion.suggestedBy && suggestion.suggestedBy.username) { %>
                            <p><i class="fas fa-user"></i> Suggested by: <%= suggestion.suggestedBy.username %></p>
                        <% } else { %>
                            <p><i class="fas fa-user"></i> Suggested by: Unknown</p>
                        <% } %>
                        <p><i class="fas fa-thumbs-up"></i> Upvotes: <span class="upvote-count"><%= suggestion.upvotes.length %></span></p>
                        <% if (user) { %>
                            <button class="upvote-btn btn-primary" data-id="<%= suggestion._id %>">
                                <i class="fas fa-thumbs-up"></i> Upvote
                            </button>
                        <% } %>
                        <% if (user && suggestion.suggestedBy && user._id.toString() === suggestion.suggestedBy._id.toString()) { %>
                            <button class="delete-btn btn-danger"><i class="fas fa-trash"></i> Delete</button>
                        <% } %>
                        <div class="comments-section">
                            <h4>Comments</h4>
                            <ul class="comments-list">
                                <% suggestion.comments.forEach(comment => { %>
                                    <li>
                                        <strong><%= comment.user.username %>:</strong> <%= comment.text %>
                                    </li>
                                <% }) %>
                            </ul>
                            <% if (user) { %>
                                <form class="comment-form" data-id="<%= suggestion._id %>">
                                    <input type="text" name="comment" placeholder="Add a comment" required>
                                    <button type="submit" class="btn-primary">Submit</button>
                                </form>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } else { %>
            <p class="no-suggestions">No suggestions available at the moment.</p>
        <% } %>
    </main>

    <footer>
        <p>&copy; 2023 Gamer Community. All rights reserved.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', () => {
        const suggestionsGrid = document.querySelector('.suggestions-grid');
        
        suggestionsGrid.addEventListener('click', async (e) => {
            if (e.target.classList.contains('delete-btn')) {
                const suggestionCard = e.target.closest('.suggestion-card');
                const suggestionId = suggestionCard.dataset.id;
                
                if (confirm('Are you sure you want to delete this suggestion?')) {
                    try {
                        const response = await axios.delete(`/suggestions/${suggestionId}`);
                        if (response.status === 200) {
                            suggestionCard.remove();
                        }
                    } catch (error) {
                        console.error('Error deleting suggestion:', error);
                        alert('An error occurred while deleting the suggestion');
                    }
                }
            }
        });

        suggestionsGrid.addEventListener('click', async (e) => {
            if (e.target.classList.contains('upvote-btn')) {
                const suggestionId = e.target.dataset.id;
                try {
                    const response = await axios.post(`/suggestions/${suggestionId}/upvote`);
                    if (response.status === 200) {
                        const upvoteCount = e.target.closest('.suggestion-card').querySelector('.upvote-count');
                        upvoteCount.textContent = response.data.upvotes;
                    }
                } catch (error) {
                    console.error('Error upvoting suggestion:', error);
                    alert('An error occurred while upvoting the suggestion');
                }
            }
        });

        const commentForms = document.querySelectorAll('.comment-form');
        commentForms.forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const suggestionId = form.dataset.id;
                const commentText = form.comment.value;
                try {
                    const response = await axios.post(`/suggestions/${suggestionId}/comment`, { text: commentText });
                    if (response.status === 201) {
                        const commentsList = form.closest('.comments-section').querySelector('.comments-list');
                        const newComment = document.createElement('li');
                        newComment.innerHTML = `<strong><%= user.username %>:</strong> ${commentText}`;
                        commentsList.appendChild(newComment);
                        form.reset();
                    }
                } catch (error) {
                    console.error('Error adding comment:', error);
                    alert('An error occurred while adding the comment');
                }
            });
        });
    });
    </script>
</body>
</html>